--- a/blessings/tests.py	2022-05-30 16:11:11.474693200 +0800
+++ b/blessings/tests.py	2022-05-30 16:56:43.318007400 +0800
@@ -13,8 +13,7 @@
 from functools import partial
 import sys
 
-from nose import SkipTest
-from nose.tools import eq_
+from pytest import skip
 from six import StringIO
 
 # This tests that __all__ is correct, since we use below everything that should
@@ -44,36 +43,36 @@
     """
     t = TestTerminal()
     if not t.is_a_tty:
-        raise SkipTest
+        skip()
     sc = unicode_cap('sc')
-    eq_(t.save, sc)
-    eq_(t.save, sc)  # Make sure caching doesn't screw it up.
+    assert t.save == sc
+    assert t.save == sc  # Make sure caching doesn't screw it up.
 
 
 def test_capability_without_tty():
     """Assert capability templates are '' when stream is not a tty."""
     t = TestTerminal(stream=StringIO())
-    eq_(t.save, u'')
-    eq_(t.red, u'')
+    assert t.save == u''
+    assert t.red == u''
 
 
 def test_capability_with_forced_tty():
     """If we force styling, capabilities had better not (generally) be
     empty."""
     t = TestTerminal(stream=StringIO(), force_styling=True)
-    eq_(t.save, unicode_cap('sc'))
+    assert t.save == unicode_cap('sc')
 
 
 def test_parametrization():
     """Test parametrizing a capability."""
-    eq_(TestTerminal(force_styling=True).cup(3, 4), unicode_parm('cup', 3, 4))
+    assert TestTerminal(force_styling=True).cup(3, 4) == unicode_parm('cup', 3, 4)
 
 
 def test_height_and_width():
     """Assert that ``height_and_width()`` returns ints."""
     t = TestTerminal()  # kind shouldn't matter.
     if not t.is_a_tty:
-        raise SkipTest()
+        skip()
     assert isinstance(t.height, int)
     assert isinstance(t.width, int)
 
@@ -81,7 +80,7 @@
 def test_stream_attr():
     """Make sure Terminal exposes a ``stream`` attribute that defaults to
     something sane."""
-    eq_(Terminal().stream, sys.__stdout__)
+    assert Terminal().stream == sys.__stdout__
 
 
 def test_location():
@@ -91,10 +90,7 @@
     with t.location(3, 4):
         t.stream.write(u'hi')
 
-    eq_(t.stream.getvalue(), unicode_cap('sc') +
-                             unicode_parm('cup', 4, 3) +
-                             u'hi' +
-                             unicode_cap('rc'))
+    assert t.stream.getvalue() == (unicode_cap('sc') + unicode_parm('cup', 4, 3) + u'hi' + unicode_cap('rc'))
 
 
 def test_horizontal_location():
@@ -102,9 +98,7 @@
     t = TestTerminal(stream=StringIO(), force_styling=True)
     with t.location(x=5):
         pass
-    eq_(t.stream.getvalue(), unicode_cap('sc') +
-                             unicode_parm('hpa', 5) +
-                             unicode_cap('rc'))
+    assert t.stream.getvalue() == (unicode_cap('sc') + unicode_parm('hpa', 5) + unicode_cap('rc'))
 
 
 def test_null_location():
@@ -112,8 +106,7 @@
     t = TestTerminal(stream=StringIO(), force_styling=True)
     with t.location():
         pass
-    eq_(t.stream.getvalue(), unicode_cap('sc') +
-                             unicode_cap('rc'))
+    assert t.stream.getvalue() == (unicode_cap('sc') + unicode_cap('rc'))
 
 
 def test_zero_location():
@@ -121,9 +114,7 @@
     t = TestTerminal(stream=StringIO(), force_styling=True)
     with t.location(0, 0):
         pass
-    eq_(t.stream.getvalue(), unicode_cap('sc') +
-                             unicode_parm('cup', 0, 0) +
-                             unicode_cap('rc'))
+    assert t.stream.getvalue() == (unicode_cap('sc') + unicode_parm('cup', 0, 0) + unicode_cap('rc'))
 
 
 def test_null_fileno():
@@ -135,7 +126,7 @@
     out = StringIO()
     out.fileno = None
     t = TestTerminal(stream=out)
-    eq_(t.save, u'')
+    assert t.save == u''
 
 
 def test_mnemonic_colors():
@@ -149,54 +140,54 @@
     # Avoid testing red, blue, yellow, and cyan, since they might someday
     # change depending on terminal type.
     t = TestTerminal(force_styling=True)
-    eq_(t.white, color(7))
-    eq_(t.green, color(2))  # Make sure it's different than white.
-    eq_(t.on_black, on_color(0))
-    eq_(t.on_green, on_color(2))
-    eq_(t.bright_black, color(8))
-    eq_(t.bright_green, color(10))
-    eq_(t.on_bright_black, on_color(8))
-    eq_(t.on_bright_green, on_color(10))
+    assert t.white == color(7)
+    assert t.green == color(2)  # Make sure it's different than white.
+    assert t.on_black == on_color(0)
+    assert t.on_green == on_color(2)
+    assert t.bright_black == color(8)
+    assert t.bright_green == color(10)
+    assert t.on_bright_black == on_color(8)
+    assert t.on_bright_green == on_color(10)
 
 
 def test_callable_numeric_colors():
     """``color(n)`` should return a formatting wrapper."""
     t = TestTerminal()
-    eq_(t.color(5)('smoo'), t.magenta + 'smoo' + t.normal)
-    eq_(t.color(5)('smoo'), t.color(5) + 'smoo' + t.normal)
-    eq_(t.on_color(2)('smoo'), t.on_green + 'smoo' + t.normal)
-    eq_(t.on_color(2)('smoo'), t.on_color(2) + 'smoo' + t.normal)
+    assert t.color(5)('smoo') == (t.magenta + 'smoo' + t.normal)
+    assert t.color(5)('smoo') == (t.color(5) + 'smoo' + t.normal)
+    assert t.on_color(2)('smoo') == (t.on_green + 'smoo' + t.normal)
+    assert t.on_color(2)('smoo') == (t.on_color(2) + 'smoo' + t.normal)
 
 
 def test_null_callable_numeric_colors():
     """``color(n)`` should be a no-op on null terminals."""
     t = TestTerminal(stream=StringIO())
-    eq_(t.color(5)('smoo'), 'smoo')
-    eq_(t.on_color(6)('smoo'), 'smoo')
+    assert t.color(5)('smoo') == 'smoo'
+    assert t.on_color(6)('smoo') == 'smoo'
 
 
 def test_naked_color_cap():
     """``term.color`` should return a stringlike capability."""
     t = TestTerminal()
-    eq_(t.color + '', t.setaf + '')
+    assert t.color + '' == t.setaf + ''
 
 
 def test_number_of_colors_without_tty():
     """``number_of_colors`` should return 0 when there's no tty."""
     # Hypothesis: once setupterm() has run and decided the tty supports 256
     # colors, it never changes its mind.
-    raise SkipTest
+    skip()
 
     t = TestTerminal(stream=StringIO())
-    eq_(t.number_of_colors, 0)
+    assert t.number_of_colors == 0
     t = TestTerminal(stream=StringIO(), force_styling=True)
-    eq_(t.number_of_colors, 0)
+    assert t.number_of_colors == 0
 
 
 def test_number_of_colors_with_tty():
     """``number_of_colors`` should work."""
     t = TestTerminal(force_styling=True)
-    eq_(t.number_of_colors, 256)
+    assert t.number_of_colors == 256
 
 
 def test_formatting_functions():
@@ -204,27 +195,24 @@
     t = TestTerminal()
     # By now, it should be safe to use sugared attributes. Other tests test
     # those.
-    eq_(t.bold(u'hi'), t.bold + u'hi' + t.normal)
-    eq_(t.green('hi'), t.green + u'hi' + t.normal)  # Plain strs for Python 2.x
+    assert t.bold(u'hi') == (t.bold + u'hi' + t.normal)
+    assert t.green('hi') == (t.green + u'hi' + t.normal)  # Plain strs for Python 2.x
     # Test some non-ASCII chars, probably not necessary:
-    eq_(t.bold_green(u'boö'), t.bold + t.green + u'boö' + t.normal)
-    eq_(t.bold_underline_green_on_red('boo'),
-        t.bold + t.underline + t.green + t.on_red + u'boo' + t.normal)
+    assert t.bold_green(u'boö') == (t.bold + t.green + u'boö' + t.normal)
+    assert t.bold_underline_green_on_red('boo') == (t.bold + t.underline + t.green + t.on_red + u'boo' + t.normal)
     # Don't spell things like this:
-    eq_(t.on_bright_red_bold_bright_green_underline('meh'),
-        t.on_bright_red + t.bold + t.bright_green + t.underline + u'meh' +
-                          t.normal)
+    assert t.on_bright_red_bold_bright_green_underline('meh') == (t.on_bright_red + t.bold + t.bright_green + t.underline + u'meh' + t.normal)
 
 
 def test_formatting_functions_without_tty():
     """Test crazy-ass formatting wrappers when there's no tty."""
     t = TestTerminal(stream=StringIO())
-    eq_(t.bold(u'hi'), u'hi')
-    eq_(t.green('hi'), u'hi')
+    assert t.bold(u'hi') == u'hi'
+    assert t.green('hi') == u'hi'
     # Test non-ASCII chars, no longer really necessary:
-    eq_(t.bold_green(u'boö'), u'boö')
-    eq_(t.bold_underline_green_on_red('loo'), u'loo')
-    eq_(t.on_bright_red_bold_bright_green_underline('meh'), u'meh')
+    assert t.bold_green(u'boö') == u'boö'
+    assert t.bold_underline_green_on_red('loo') == u'loo'
+    assert t.on_bright_red_bold_bright_green_underline('meh') == u'meh'
 
 
 def test_nice_formatting_errors():
@@ -261,13 +249,13 @@
     """If ``force_styling=None`` is passed to the constructor, don't ever do
     styling."""
     t = TestTerminal(force_styling=None)
-    eq_(t.save, '')
+    assert t.save == ''
 
 
 def test_null_callable_string():
     """Make sure NullCallableString tolerates all numbers and kinds of args it
     might receive."""
     t = TestTerminal(stream=StringIO())
-    eq_(t.clear, '')
-    eq_(t.move(1, 2), '')
-    eq_(t.move_x(1), '')
+    assert t.clear == ''
+    assert t.move(1, 2) == ''
+    assert t.move_x(1) == ''
